(defpackage :cl-inflector-test
  (:use :cl
        :cl-inflector
        :lisp-unit2))
(in-package :cl-inflector-test)

(define-test test-plural-of-regular-en-us ()
  (set-lang! :en_US)
  (loop for word in (list "quiz" "buzz" "fez" "whiz" "wiz" "wolf" "wife")
     do (assert-equal (singular-of (plural-of word)) word))
  (assert-equal "oxen" (plural-of "ox"))
  (assert-equal "matrices" (plural-of "matrix"))
  (assert-equal "vertices" (plural-of "vertex"))
  (assert-equal "indices" (plural-of "index"))
  (assert-equal "hives" (plural-of "hive"))
  (assert-equal "tomatoes" (plural-of "tomato"))
  (assert-equal "crises" (plural-of "crisis"))
  (assert-equal "wolves" (plural-of "wolf"))
  (assert-equal "wives" (plural-of "wife")))

(define-test test-plural-of-irregular-en-us ()
  (set-lang! :en_US)
  (assert-equal "people" (plural-of "person"))
  (assert-equal "men" (plural-of "man"))
  (assert-equal "sexes" (plural-of "sex")))

(define-test test-add-irregular-en-us ()
  (set-lang! :en_US)
  (let ((cl-inflector::*irregulars* cl-inflector::*irregulars*))
    (assert-equal "blurbles" (plural-of "blurble"))
    (irregular "blurble" "blurblix")
    (assert-equal "blurblix" (plural-of "blurble"))))

(define-test test-uncountable-en-us ()
  (set-lang! :en_US)
  (assert-equal "fish" (plural-of "fish"))
  (assert-equal "fish" (singular-of "fish"))
  (assert-equal "sheep" (plural-of "sheep"))
  (assert-equal "sheep" (singular-of "sheep")))

(define-test test-add-uncountable-en-us ()
  (set-lang! :en_US)
  (let ((cl-inflector::*uncountables* cl-inflector::*uncountables*))
    (assert-equal "cackles" (plural-of "cackle"))
    (uncountable "cackle")
    (assert-equal "cackle" (plural-of "cackle"))))

(define-test test-singular-of-en-us ()
  (set-lang! :en_US)
  (assert-equal "cup" (singular-of "cups"))
  (assert-equal "ox" (singular-of "oxen"))
  (assert-equal "life" (singular-of "lives")))

(define-test test-plural-of-regular-pt-br ()
  (set-lang! :pt_BR)
  (let ((reg-list '("alemão" "irmão" "limão" "gás" "inglês" "homem" "anzol" "fiel" "ramal" "paz" "mar" "país")))
    (mapcar (lambda (word)
              (assert-equal (singular-of (plural-of word)) word))
            reg-list)))

(define-test test-plural-of-irregular-pt-br ()
  (set-lang! :pt_BR)
  (assert-equal "são" (plural-of "é"))
  (assert-equal "têm" (plural-of "tem")))

(define-test test-add-irregular-pt-br ()
  (set-lang! :pt_BR)
  (let ((cl-inflector::*irregulars* cl-inflector::*irregulars*))
    (assert-equal "blurbles" (plural-of "blurble"))
    (irregular "blurble" "blurbleses")
    (assert-equal "blurbleses" (plural-of "blurble"))))

(define-test test-uncountable-pt-br ()
  (set-lang! :pt_BR)
  (assert-equal "tórax" (plural-of "tórax"))
  (assert-equal "tórax" (singular-of "tórax"))
  (assert-equal "tênis" (plural-of "tênis"))
  (assert-equal "tênis" (singular-of "tênis")))

(define-test test-add-uncountable-pt-br ()
  (set-lang! :pt_BR)
  (let ((cl-inflector::*uncountables* cl-inflector::*uncountables*))
    (assert-equal "cackles" (plural-of "cackle"))
    (uncountable "cackle")
    (assert-equal "cackle" (plural-of "cackle"))))

(define-test change-languages-creating-uncountables ()
  (set-lang! :en_US)
  (assert-equal "doods" (plural-of "dood"))
  (uncountable "dood")
  (assert-equal "dood" (plural-of "dood"))
  (set-lang! :pt_BR)
  (assert-equal "doods" (plural-of "dood"))
  (uncountable "dood")
  (assert-equal "dood" (plural-of "dood")))

(define-test change-languages-creating-irregulars ()
  (set-lang! :en_US)
  (assert-equal "doods" (plural-of "dood"))
  (irregular "dood" "doodles")
  (assert-equal "doodles" (plural-of "dood"))
  (set-lang! :pt_BR)
  (assert-equal "doods" (plural-of "dood"))
  (irregular "dood" "doodes")
  (assert-equal "doodes" (plural-of "dood"))
  (set-lang! :en_US)
  (assert-equal "doods" (plural-of "dood"))
  (set-lang! :pt_BR)
  (assert-equal "doods" (plural-of "dood")))
